// Generated by CoffeeScript 1.8.0
(function() {
  var PathToRegexp, Proxy, url;

  PathToRegexp = require('path-to-regexp');

  url = require('url');

  module.exports = Proxy = (function() {
    function Proxy(root) {
      this.root = root;
      this.routes = [];
    }

    Proxy.prototype.isHandleScope = function(path) {
      return path.indexOf(this.root) > -1;
    };

    Proxy.prototype.search = function(method, path) {
      var key, m, match, n, r, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.routes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        if (!(r.method === method)) {
          continue;
        }
        m = r.regexp.exec(path);
        if (m != null) {
          match = {};
          _ref1 = r.regexp.keys;
          for (n = _j = 0, _len1 = _ref1.length; _j < _len1; n = ++_j) {
            key = _ref1[n];
            match[key.name] = m[n + 1];
          }
          return [r, match];
        } else {
          continue;
        }
      }
      return new Error(path + ' is not routed to anywhere');
    };

    Proxy.prototype.route = function(method, path, callback) {
      return this.routes.push({
        method: method,
        regexp: PathToRegexp(path),
        callback: callback
      });
    };

    Proxy.prototype.get = function(path, callback) {
      return Promise.resolve(this.route('GET', path, callback));
    };

    Proxy.prototype.post = function(path, callback) {
      return Promise.resolve(this.route('POST', path, callback));
    };

    Proxy.prototype.put = function(path, callback) {
      return Promise.resolve(this.route('PUT', path, callback));
    };

    Proxy.prototype.patch = function(path, callback) {
      return Promise.resolve(this.route('PATCH', path, callback));
    };

    Proxy.prototype["delete"] = function(path, callback) {
      return Promise.resolve(this.route('DELETE', path, callback));
    };

    Proxy.prototype.createResponse = function(request) {
      var match, params, parsed, path, result, route;
      path = request.url.replace(this.root, '').replace(url.parse(request.url).search, '');
      result = this.search(request.method.toUpperCase(), path);
      if (result instanceof Error) {
        return new Response(JSON.stringify({
          error: result.message
        }), {
          status: 404,
          headers: {
            'Content-Type': 'application/json'
          }
        });
      } else {
        route = result[0], match = result[1];
        if (request.method === 'GET') {
          parsed = url.parse(request.url, true);
          params = parsed.query;
          return Promise.resolve(route.callback(match, params, request)).then(function(data) {
            return new Response(JSON.stringify(data), {
              status: 200,
              headers: {
                'Content-Type': 'application/json'
              }
            });
          });
        } else {
          return request.json().then(function(body) {
            return route.callback(match, body, request);
          }).then(function(data) {
            return new Response(JSON.stringify(data), {
              status: 200,
              headers: {
                'Content-Type': 'application/json'
              }
            });
          });
        }
      }
    };

    return Proxy;

  })();

}).call(this);
